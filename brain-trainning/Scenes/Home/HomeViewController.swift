//
//  HomeViewController.swift
//  brain-trainning
//
//  Created by mao.miyaji on 2018/12/04.
//  Copyright (c) 2018å¹´ mao.miyaji. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
}

class HomeViewController: BaseViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    let margin: CGFloat = 20

    let containerView: UIView = {
        let view = UIView()
        view.layer.backgroundColor = UIColor.clear.cgColor
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    let startButton: UIButton = {
        let button = UIButton()
        let image = UIImage(named: "button_start")
        button.setImage(image, for: .normal)
        button.imageView?.contentMode = .scaleAspectFit
        button.contentHorizontalAlignment = .fill
        button.contentVerticalAlignment = .fill
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    @objc func routeToTrainingList(_ sender: UIButton)
    {
        router?.routeToTrainingList(segue: nil)
    }

    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()

        setFooterMenu()

        startButton.addTarget(self, action: #selector(routeToTrainingList), for: .touchUpInside)
        containerView.addSubview(startButton)

        startButton.leadingAnchor.constraint(equalTo: containerView.leadingAnchor).isActive = true
        startButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor).isActive = true
        startButton.heightAnchor.constraint(equalToConstant: 126.0).isActive = true
        startButton.widthAnchor.constraint(equalToConstant: 126.0).isActive = true
        
        view.addSubview(containerView)

        containerView.leftAnchor.constraint(equalTo: view.leftAnchor, constant: margin).isActive = true
        containerView.topAnchor.constraint(equalTo: view.topAnchor, constant: margin).isActive = true
        containerView.heightAnchor.constraint(equalToConstant: view.frame.height - 50 - margin - footerMenuView.frame.height).isActive = true
        containerView.widthAnchor.constraint(equalToConstant: view.frame.width - (margin * 2)).isActive = true
    }
    
}
