//
//  TitleViewController.swift
//  brain-trainning
//
//  Created by mao.miyaji on 2018/11/30.
//  Copyright (c) 2018年 mao.miyaji. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TitleDisplayLogic: class
{
}

class TitleViewController: BaseViewController, TitleDisplayLogic
{
    var interactor: TitleBusinessLogic?
    var router: (NSObjectProtocol & TitleRoutingLogic & TitleDataPassing)?

    let titleLabel: UILabel = {
        let label = UILabel()
        label.text = "Brain Training"
        label.textAlignment = .center
        label.textColor = UIColor.black
        label.font = UIFont.systemFont(ofSize: 24.0, weight: .bold)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    let navigateLabel: UILabel = {
        let label = UILabel()
        label.text = "TAP TO START"
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 20.0, weight: .bold)
        // ColorAsset (iOS 11.0 以上対応)
        label.textColor = UIColor(named: "basGray")
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    let logoBrainImageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: "logo_brain"))
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TitleInteractor()
        let presenter = TitlePresenter()
        let router = TitleRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    func routeToHome()
    {
        doLoading()
        router?.routeToHome(segue: nil)
    }
    
    // MARK: View lifecycle

    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setLogoBrainImageView()
        setTitleLabel()
        setNavigateLabel()
    }

    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?)
    {
        if touches.first != nil {
            routeToHome()
        }
    }
    
    // MARK: Setting logoBrainImageView
    private func setLogoBrainImageView()
    {
        // 上下アニメーション
        let hover = CABasicAnimation(keyPath: "position")
        hover.isAdditive = true
        hover.fromValue = NSValue(cgPoint: CGPoint(x: logoBrainImageView.frame.origin.x, y: logoBrainImageView.frame.origin.y - 15.0))
        hover.toValue = NSValue(cgPoint: CGPoint(x: logoBrainImageView.frame.origin.x, y: logoBrainImageView.frame.origin.y + 15.0))
        hover.autoreverses = true
        hover.duration = 2
        hover.repeatCount = Float.infinity
        logoBrainImageView.layer.add(hover, forKey: "myHoverAnimation")

        view.addSubview(logoBrainImageView)

        let widthConstraint = NSLayoutConstraint(item: logoBrainImageView, attribute: .width, relatedBy: .equal,
                                                 toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 210)
        let heightConstraint = NSLayoutConstraint(item: logoBrainImageView, attribute: .height, relatedBy: .equal,
                                                  toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 188.5)
        let xConstraint = NSLayoutConstraint(item: logoBrainImageView, attribute: .centerX, relatedBy: .equal,
                                             toItem: view, attribute: .centerX, multiplier: 1, constant: 0)
        let yConstraint = NSLayoutConstraint(item: logoBrainImageView, attribute: .centerY, relatedBy: .equal,
                                             toItem: view, attribute: .centerY, multiplier: 1, constant: 0)
        
        NSLayoutConstraint.activate([widthConstraint, heightConstraint, xConstraint, yConstraint])
    }

    // MARK: Setting titleLabel
    private func setTitleLabel()
    {
        // 影をつける
        titleLabel.layer.shadowColor = UIColor.gray.cgColor
        titleLabel.layer.shadowRadius = 3.0
        titleLabel.layer.shadowOpacity = 0.5
        titleLabel.layer.shadowOffset = CGSize(width: 4, height: 4)
        titleLabel.layer.masksToBounds = false
        view.addSubview(titleLabel)

        let xConstraint = NSLayoutConstraint(item: titleLabel, attribute: .centerX, relatedBy: .equal,
                                             toItem: view, attribute: .centerX, multiplier: 1, constant: 0)
        let yConstraint = NSLayoutConstraint(item: titleLabel, attribute: .centerY, relatedBy: .equal,
                                             toItem: view, attribute: .centerY, multiplier: 1, constant: 0)

        NSLayoutConstraint.activate([xConstraint, yConstraint])
    }
    
    // MARK: Setting navigateLabel
    private func setNavigateLabel()
    {
        view.addSubview(navigateLabel)

        let xConstraint = NSLayoutConstraint(item: navigateLabel, attribute: .centerX, relatedBy: .equal,
                                             toItem: view, attribute: .centerX, multiplier: 1, constant: 0)
        let yConstraint = NSLayoutConstraint(item: navigateLabel, attribute: .bottom, relatedBy: .equal,
                                             toItem: view, attribute: .bottom, multiplier: 1, constant: -40)
        NSLayoutConstraint.activate([xConstraint, yConstraint])
    }

}
