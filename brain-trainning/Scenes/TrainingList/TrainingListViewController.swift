//
//  TrainingListViewController.swift
//  brain-trainning
//
//  Created by mao.miyaji on 2019/01/18.
//  Copyright (c) 2019å¹´ mao.miyaji. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TrainingListDisplayLogic: class
{
}

class TrainingListViewController: BaseViewController, TrainingListDisplayLogic
{
    var interactor: TrainingListBusinessLogic?
    var router: (NSObjectProtocol & TrainingListRoutingLogic & TrainingListDataPassing)?

    let continueLabel: UILabel = {
        let label = UILabel()
        label.text = "Welcome to TrainingList!\nSorry...\nContinue to Next Chapter!"
        label.numberOfLines = 0
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TrainingListInteractor()
        let presenter = TrainingListPresenter()
        let router = TrainingListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()

        view.addSubview(continueLabel)
        continueLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        continueLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
    }
}
